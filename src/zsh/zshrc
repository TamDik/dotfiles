export LANG=en_US.UTF-8
setopt no_beep
setopt ignoreeof
setopt interactivecomments
setopt correct
# disable r

# key bind
export KEYTIMEOUT=20

bindkey -e
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "^u" backward-kill-line


# prompt
function _set_ps_mode {
  local mode color1 color2 br sp
  mode=$1
  case $mode in
    insert)
      color1=110
      color2=248
      ;;
    command)
      color1=180
      color2=180
      ;;
  esac
  br=$'\n'
  sp=' '
  PS1=$br%~$br%F{$color1}$%f$sp
  PS2=%F{$color2}$%f$sp
}

setopt prompt_subst
autoload -Uz vcs_info
_set_ps_mode insert
precmd() {
  vcs_info
}

function zle-line-init zle-keymap-select {
  case $KEYMAP in
    vicmd)
      _set_ps_mode command;;
    viins|main)
      _set_ps_mode insert;;
  esac
  zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{150}"
zstyle ':vcs_info:git:*' unstagedstr "%F{210}"
zstyle ':vcs_info:git:*' formats " %c%u%b"
zstyle ':vcs_info:*' formats " %s(%b)"

export RPROMPT='%1(j.%j-job.)${vcs_info_msg_0_}'


# history
setopt hist_ignore_dups
setopt hist_ignore_all_dups
setopt share_history
setopt hist_no_store
setopt hist_reduce_blanks
setopt hist_verify
export HISTFILE=~/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
HISTIGNORE="exit:rm *"

zshaddhistory() {
  local line pattern patterns
  line=${1%%$'\n'}
  patterns=($(echo ${HISTIGNORE} | sed 's/ /[space]/g' | sed 's/:/ /g'));
  for pattern in $patterns; do
    pattern=$(echo $pattern | sed 's/\[space\]/ /g')
    if [[ $line == $~pattern ]]; then
      return 1
    fi
  done
  return 0
}


# cd
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
alias dirs='dirs -v'
cdpath=(
  $cdpath
)

chpwd() {
  if [ `uname` = 'Darwin' ]; then
    ls -aGF
  elif [ `uname` = 'Linux' ]; then
    ls -aF --color=always
  fi
}


# completion
setopt list_types
setopt complete_in_word
autoload -Uz compinit && compinit -d ~/.zcompdump
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}'
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors $LS_COLORS


# sticky shift
function _sticky_shift () {
  local char
  typeset -A sticky_table
  sticky_table=(
    '`' '~' '1' '!' '2' '@' '3' '#' '4' '$' '5' '%' '6' '^' '7' '&' '8' '*' '9' '(' '0' ')' '-' '_' '=' '+'
    '[' '{' ']' '}' '\' '|' ';' ':' "'" '"' ',' '<' '.' '>' '/' '?'
    'a' 'A' 'b' 'B' 'c' 'C' 'd' 'D' 'e' 'E' 'f' 'F' 'g' 'G' 'h' 'H' 'i' 'I' 'j' 'J' 'k' 'K' 'l' 'L' 'm' 'M'
    'n' 'N' 'o' 'O' 'p' 'P' 'q' 'Q' 'r' 'R' 's' 'S' 't' 'T' 'u' 'U' 'v' 'V' 'w' 'W' 'x' 'X' 'y' 'Y' 'z' 'Z'
    ' ' ';'
  )
  read -k 1 -t 0.5 char
  if [[ -n "${sticky_table[$char]}" ]]; then
    char="${sticky_table[$char]}"
  else
    char=';'
  fi
  LBUFFER="$LBUFFER$char"
}
zle -N _sticky_shift
bindkey ';' _sticky_shift


# edit-and-execute-command
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey "\C-x\C-e" edit-command-line


# zsh-users/zsh-syntax-highlighting
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)


# alias
alias sudo='sudo '
alias vim='nvim'
alias vimdiff='nvim -d'

if [ `uname` = 'Darwin' ]; then
  alias ls='ls -FG'
  alias la='ls -aFG'
  alias ll='ls -lhFG'
  alias lla='ls -alhFG'
elif [ `uname` = 'Linux' ]; then
  alias ls='ls -F --color=always'
  alias la='ls -aF --color=always'
  alias ll='ls -lhF --color=always'
  alias lla='ls -alhF --color=always'
fi
alias tree='tree -NC -l'

alias history-all='history -E 1 '

alias du='du -h'
alias df='df -h'

alias gst='git status'
alias gdf='git diff'
alias gaa='git add .'
alias gcm='git commit'


# pyenv
export PYENV_ROOT=~/.pyenv
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


# fzf
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
FZF_SHELL_DIR=/opt/homebrew/opt/fzf/shell
[ -f $FZF_SHELL_DIR/completion.zsh ] && source $FZF_SHELL_DIR/completion.zsh
[ -f $FZF_SHELL_DIR/key-bindings.zsh ] && source $FZF_SHELL_DIR/key-bindings.zsh
# CTRL-T - Paste the selected files and directories onto the command-line
# CTRL-R - Paste the selected command from history onto the command-line
# ALT-C  - cd into the selected directory


# attach the selected session
fta () {
  local message_of_creation sessions session
  if [ -n "$TMUX" ]; then
    return
  fi

  message_of_creation='CREATE NEW SESSION'
  sessions=$(tmux list-sessions 2> /dev/null)
  if [ -z "$sessions" ]; then
    sessions=$message_of_creation
  else
    sessions="${message_of_creation}\n${sessions}"
  fi

  session=$(echo $sessions | fzf --exit-0 --select-1 | awk -F: '{print $1}')
  case $session in
    ${message_of_creation} )
      echo -n '\n\e[031mNEW SESSION NAME ❱\e[m '
      read session_name
      if [ -n "$session_name" ]; then
        tmux new -s $session_name
      fi;;

    '' ) ;;
    * ) tmux attach -t $session;;
  esac
}


# Open the selected file at dotfiles
frc() (
  local rcdir rcfile preview
  rcdir=~/repos/github.com/TamDik/dotfiles
  cd $rcdir > /dev/null

  if type bat > /dev/null 2>&1; then
      preview="bat --style=numbers --color=always {}"
  else
      preview="cat -n {}"
  fi
  rcfile=$(find . -name '.git' -prune -o -type f -print | sed '/.DS_Store/d' | sed -e 's/^.\///' | fzf --preview $preview)

  if [ -z "$rcfile" ]; then
    return
  fi
  nvim "$rcfile"
)
