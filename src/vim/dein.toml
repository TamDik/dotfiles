[[plugins]]
repo = 'vim-jp/vimdoc-ja'


[[plugins]]
repo = 'sainnhe/edge'
hook_add = '''
  colorscheme edge
'''


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2
  let s:mode_map = {
    \   'n': 'N',
    \   'i': 'I',
    \   'R': 'R',
    \   'v': 'V',
    \   'V': 'VL',
    \   "\<C-v>": 'VB',
    \   'c': 'C',
    \   's': 'S',
    \   'S': 'SL',
    \   "\<C-s>": 'SB',
    \   't': 'T',
    \}
  let g:lightline = {
    \ 'colorscheme': 'seoul256',
    \ 'active': {
    \   'left':  [['modewitheskk'],
    \             ['filename'],
    \            ],
    \   'right': [['filetype'],
    \             ['fileencoding'],
    \             ['aleactive', 'fileformat'],
    \            ]
    \ },
    \ 'inactive': {
    \   'left':  [['filename']],
    \   'right': []
    \ },
    \ 'mode_map': s:mode_map,
    \ 'component_function': {
    \   'aleactive': 'LLAleActive',
    \   'modewitheskk': 'ModeWithEskk'
    \ },
    \ }

  function! ModeWithEskk()
    let l:mode = mode()
    let l:mode_str = get(s:mode_map, l:mode, l:mode)
    if !(exists('g:loaded_eskk') && g:loaded_eskk && eskk#is_enabled())
      return l:mode_str
    end
    let l:eskk_mode_str = g:eskk#statusline_mode_strings[eskk#get_mode()]
    return l:mode_str . '-' . l:eskk_mode_str
  endfunction

  function! LLAleActive()
    if !exists('g:ale_enabled')
      return ''
    endif
    if !g:ale_enabled
      return 'disabled'
    endif
    if len(ale#linter#Get(&filetype)) == 0
      return 'no linter'
    endif

    let l:counts = ale#statusline#Count(bufnr(''))
    let l:num_errors = l:counts.error + l:counts.style_error
    let l:num_warnings = l:counts.total - l:num_errors
    return printf('E%dW%d', l:num_errors, l:num_warnings)
  endfunction
'''


[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo = 'tpope/vim-repeat'


[[plugins]]
repo = 'tpope/vim-commentary'


[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <silent> <leader>ff :<C-u>Files<CR>
  nnoremap <silent> <leader>fb :<C-u>Buffers<CR>
  " nnoremap <silent> <leader>fl :<C-u>Lines<CR>
  nnoremap <silent> <leader>fr :<C-u>Rg<CR>
  " nnoremap <silent> <leader>ft :<C-u>Tags<CR>
  " nnoremap <silent> <leader>fh :<C-u>History<CR>
  let g:fzf_commits_log_options = '--graph --decorate --pretty=oneline --all --abbrev-commit'

  imap <c-x><c-k> <plug>(fzf-complete-word)
  imap <c-x><c-f> <plug>(fzf-complete-path)
  imap <c-x><c-l> <plug>(fzf-complete-line)
'''


[[plugins]]
repo = 'junegunn/fzf'
merged = '0'
hook_add = '''
  let $FZF_DEFAULT_OPTS = '--layout=reverse --border --inline-info '
  let $FZF_DEFAULT_OPTS .= '--color=fg:#c6c8d1,bg:#161821,hl:#6b7089'
  let $FZF_DEFAULT_OPTS .= ',fg+:#c6c8d1,bg+:#1e2132,hl+:#84a0c6'
  let $FZF_DEFAULT_OPTS .= ',info:#b4be82,prompt:#84a0c6,pointer:#84a0c6'
  let $FZF_DEFAULT_OPTS .= ',marker:#84a0c6,spinner:#84a0c6,header:#6b7089'
  if has('nvim')
    let s:fzf_win = -1
    function! FZFWindow()
      setlocal ambiwidth=single  " To prevent a preview window from being disturbed

      let l:width = float2nr(&columns * 0.9)
      let l:height = float2nr(&lines * 0.8)
      let l:opts = {
         \ 'relative': 'win',
         \ 'row': (&lines - l:height) / 2,
         \ 'col': (&columns - l:width) / 2,
         \ 'width': l:width,
         \ 'height': l:height,
         \ 'style': 'minimal'
         \}
      let s:fzf_win = nvim_open_win(nvim_create_buf(v:false, v:true), v:true, l:opts)
      call setwinvar(s:fzf_win, '&winhighlight', 'NormalFloat:TabLine')
    endfunction

    if &ambiwidth == 'double'
      augroup FZFAmbi
        autocmd!
        autocmd BufWinLeave * if win_getid() == s:fzf_win | setlocal ambiwidth=double | endif
      augroup END
    endif

    let g:fzf_layout = {'window': 'call FZFWindow()'}
  endif
'''


[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
  if !has('nvim')
    let g:neocomplete#enable_at_startup = 1
  endif
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_underbar_completion = 1
  let g:neocomplete#enable_camel_case_completion = 1
  let g:neocomplete#enable_auto_close_preview = 1
'''


[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  if has('nvim')
    let g:deoplete#enable_at_startup = 1
  endif
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'


[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger="<Tab>"
  let g:UltiSnipsJumpForwardTrigger="<Tab>"
  let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
'''


[[plugins]]
repo = 'honza/vim-snippets'


[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
  let g:startify_files_number = 8
  let g:startify_lists = [
    \ { 'type': 'files',     'header': ['   Recent Files']},
    \ { 'type': 'dir',       'header': ['   Current Directory -- ' . getcwd()] },
    \ { 'type': 'sessions',  'header': ['   Sessions']},
    \ { 'type': 'bookmarks', 'header': ['   Bookmarks']},
    \ { 'type': 'commands',  'header': ['   Commands']},
    \ ]
  let g:startify_bookmarks = []

  let s:repos = split(glob('~/repos/github.com/TamDik/*'), '\n')
  if exists('*HomeToTilde')
    let s:repos = map(s:repos, 'HomeToTilde(v:val)')
  endif
  let g:startify_bookmarks += s:repos

  let g:startify_custom_header=''
  let g:startify_change_to_vcs_root=1
'''


[[plugins]]
repo = "tyru/eskk.vim"
hook_add = '''
  imap <C-j> <Plug>(eskk:toggle)
  cmap <C-j> <Plug>(eskk:toggle)

  let g:eskk#directory = expand('~/.cache/eskk')
  let g:eskk#dictionary = {
    \ 'path': expand('~/.cache/skk-jisyo.utf8'),
    \ 'sorted': 0,
    \ 'encoding': 'utf-8',
    \}
  let s:aqua_skk = expand('~/Library/Application Support/AquaSKK')
  if isdirectory(s:aqua_skk)
    let g:eskk#large_dictionary = {
      \ 'path': s:aqua_skk . '/SKK-JISYO.L',
      \ 'sorted': 1,
      \ 'encoding': 'euc-jp',
      \}
  elseif isdirectory('/usr/share/skk')
    let g:eskk#large_dictionary = {
      \ 'path': '/usr/share/skk/SKK-JISYO.L',
      \ 'sorted': 1,
      \ 'encoding': 'euc-jp',
      \}
  endif
'''


[[plugins]]
repo = "cespare/vim-toml"


[[plugins]]
repo = "aklt/plantuml-syntax"


[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  function! s:open_defx_if_directory()
    try
      let l:full_path = expand(expand('%:p'))
      if isdirectory(l:full_path)
        execute "Defx `expand('%:p')` -listed | bd " . expand('%:r')
      endif
    catch
    endtry
  endfunction

  augroup DefxConfig
    autocmd!
    autocmd BufEnter * call s:open_defx_if_directory()
  augroup END

  nnoremap <silent> <leader>d :<C-u>Defx -listed -resume<CR>
'''
[plugins.ftplugin]
defx = '''
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
'''
