[[plugins]]
repo = 'vim-jp/vimdoc-ja'


[[plugins]]
repo = 'sainnhe/edge'
hook_add = '''
  colorscheme edge
'''


[[plugins]]
repo = "cespare/vim-toml"


[[plugins]]
repo = "aklt/plantuml-syntax"


[[plugins]]
repo = 'junegunn/fzf'
merged = '0'
hook_add = '''
  let $FZF_DEFAULT_OPTS = '--layout=reverse --border --inline-info '
  let $FZF_DEFAULT_OPTS .= '--color=fg:#c6c8d1,bg:#161821,hl:#6b7089'
  let $FZF_DEFAULT_OPTS .= ',fg+:#c6c8d1,bg+:#1e2132,hl+:#84a0c6'
  let $FZF_DEFAULT_OPTS .= ',info:#b4be82,prompt:#84a0c6,pointer:#84a0c6'
  let $FZF_DEFAULT_OPTS .= ',marker:#84a0c6,spinner:#84a0c6,header:#6b7089'
  if has('nvim')
    let s:fzf_win = -1
    function! FZFWindow()
      setlocal ambiwidth=single  " To prevent a preview window from being disturbed

      let l:width = float2nr(&columns * 0.9)
      let l:height = float2nr(&lines * 0.8)
      let l:opts = {
         \ 'relative': 'win',
         \ 'row': (&lines - l:height) / 2,
         \ 'col': (&columns - l:width) / 2,
         \ 'width': l:width,
         \ 'height': l:height,
         \ 'style': 'minimal'
         \}
      let s:fzf_win = nvim_open_win(nvim_create_buf(v:false, v:true), v:true, l:opts)
      call setwinvar(s:fzf_win, '&winhighlight', 'NormalFloat:TabLine')
    endfunction

    if &ambiwidth == 'double'
      augroup FZFAmbi
        autocmd!
        autocmd BufWinLeave * if win_getid() == s:fzf_win | setlocal ambiwidth=double | endif
      augroup END
    endif

    let g:fzf_layout = {'window': 'call FZFWindow()'}
  endif
'''


[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <silent> <leader>ff :<C-u>Files<CR>
  nnoremap <silent> <leader>fb :<C-u>Buffers<CR>
  " nnoremap <silent> <leader>fl :<C-u>Lines<CR>
  nnoremap <silent> <leader>fr :<C-u>Rg<CR>
  " nnoremap <silent> <leader>ft :<C-u>Tags<CR>
  " nnoremap <silent> <leader>fh :<C-u>History<CR>
  let g:fzf_commits_log_options = '--graph --decorate --pretty=oneline --all --abbrev-commit'

  imap <c-x><c-k> <plug>(fzf-complete-word)
  imap <c-x><c-f> <plug>(fzf-complete-path)
  imap <c-x><c-l> <plug>(fzf-complete-line)
'''


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2
  let s:mode_map = {
    \   'n': 'N',
    \   'i': 'I',
    \   'R': 'R',
    \   'v': 'V',
    \   'V': 'VL',
    \   "\<C-v>": 'VB',
    \   'c': 'C',
    \   's': 'S',
    \   'S': 'SL',
    \   "\<C-s>": 'SB',
    \   't': 'T',
    \}
  let g:lightline = {
    \ 'colorscheme': 'seoul256',
    \ 'active': {
    \   'left':  [['modewithskk'],
    \             ['filename'],
    \            ],
    \   'right': [['filetype'],
    \             ['fileencoding'],
    \             ['aleactive', 'fileformat'],
    \            ]
    \ },
    \ 'inactive': {
    \   'left':  [['filename']],
    \   'right': []
    \ },
    \ 'mode_map': s:mode_map,
    \ 'component_function': {
    \   'aleactive': 'LLAleActive',
    \   'modewithskk': 'ModeWithSkk'
    \ },
    \ }

  function! ModeWithSkk() abort
    let l:mode = mode()
    let l:mode_str = get(s:mode_map, l:mode, l:mode)
    if !(exists('g:loaded_skkeleton') && g:loaded_skkeleton && skkeleton#is_enabled())
      return l:mode_str
    end
    let l:skk_mode = skkeleton#mode()
    let l:eskk_mode_str = get({'hira': 'あ', 'kata': 'ア'}, l:skk_mode, l:skk_mode)
    return l:mode_str . '-' . l:eskk_mode_str
  endfunction

  function! LLAleActive() abort
    if !exists('g:ale_enabled')
      return ''
    endif
    if !g:ale_enabled
      return 'disabled'
    endif
    if len(ale#linter#Get(&filetype)) == 0
      return 'no linter'
    endif

    let l:counts = ale#statusline#Count(bufnr(''))
    let l:num_errors = l:counts.error + l:counts.style_error
    let l:num_warnings = l:counts.total - l:num_errors
    return printf('E%dW%d', l:num_errors, l:num_warnings)
  endfunction
'''
