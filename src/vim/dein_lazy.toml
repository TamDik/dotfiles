[[plugins]]
repo = 'vim-denops/denops.vim'


[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_event = 'VimEnter'
# on_ft = []
hook_add = '''
  let g:lsp_document_code_action_signs_enabled = 0
  let g:lsp_diagnostics_virtual_text_prefix = 'â€£ '
  let g:lsp_diagnostics_signs_error = {'text': 'E'}
  let g:lsp_diagnostics_signs_warning = {'text': 'W'}
  let g:lsp_diagnostics_signs_information = {'text': 'I'}
  let g:lsp_diagnostics_signs_hint = {'text': 'H'}

  function! s:on_lsp_buffer_enabled() abort
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    nmap <buffer> <leader>p <plug>(lsp-hover-float)
    nmap <buffer> <leader>ak <Plug>(lsp-previous-diagnostic)
    nmap <buffer> <leader>aj <plug>(lsp-next-diagnostic)
  endfunction

  augroup LSPInstall
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
'''


[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = 'vim-lsp'
hook_add = '''
  let g:lsp_settings = {
  \  'pylsp-all': {
  \    'workspace_config': {
  \      'pylsp': {
  \        'plugins': {
  \        'pycodestyle': {'enabled': v:true},
  \        'pylint': {'enabled': v:false},
  \        }
  \      }
  \    }
  \  }
  \}
'''


[[plugins]]
repo = 'Shougo/defx.nvim'
on_event = 'BufEnter'
on_if = 'isdirectory(expand("%:p"))'
hook_add = '''
  nnoremap <silent> <leader>d <Cmd>Defx -listed -resume<CR>
'''
hook_post_source = '''
  function! s:open_defx_if_directory()
    try
      let l:full_path = expand(expand('%:p'))
      if isdirectory(l:full_path)
        execute "Defx `expand('%:p')` -listed | bd " . expand('%:r')
      endif
    catch
    endtry
  endfunction

  augroup DefxConfig
    autocmd!
    autocmd BufEnter * call s:open_defx_if_directory()
  augroup END

  " at VimEnter
  call s:open_defx_if_directory()
'''
[plugins.ftplugin]
defx = '''
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
'''


[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']
on_event = 'InsertEnter'
hook_source = '''
  inoremap <silent><expr> <C-l> ddc#complete_common_string()

  call ddc#custom#patch_global('sources', ['olppet', 'vim-lsp', 'around', 'file'])
  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'ignoreCase': v:true,
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank'],
      \   'converters': [],
      \ },
      \ 'around': {
      \   'mark': 'A',
      \   'matchers': ['matcher_head', 'matcher_length']
      \ },
      \ 'skkeleton': {
      \   'mark': 'skk',
      \   'matchers': ['skkeleton'],
      \   'minAutoCompleteLength': 2,
      \ },
      \ 'file': {
      \   'mark': 'F',
      \   'isVolatile': v:true,
      \   'forceCompletionPattern': '\S/\S*',
      \ },
      \ 'olppet': {
      \   'mark': 'pet',
      \   'minAutoCompleteLength': 1,
      \ },
      \ 'vim-lsp': {
      \   'mark': 'lsp',
      \   'minAutoCompleteLength': 1,
      \ },
      \ })
  call ddc#custom#patch_global('backspaceCompletion', v:true)
  call ddc#enable()
'''


[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'


[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'


[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'


[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'


[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'


[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'


[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j> <Plug>(skkeleton-toggle)
  cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
  let s:global_jisyo = ''
  if isdirectory(expand('~/Library/Application Support/AquaSKK'))
    let s:global_jisyo = expand('~/Library/Application Support/AquaSKK/SKK-JISYO.L')
  elseif isdirectory('/usr/share/skk')
    let s:global_jisyo = '/usr/share/skk/SKK-JISYO.L'
  endif

  call skkeleton#config({
      \ 'globalJisyo': s:global_jisyo,
      \ 'eggLikeNewline': v:true,
      \ 'registerConvertResult': v:true,
      \ })

  call skkeleton#register_kanatable('rom', {'jj': 'escape'})

  autocmd User skkeleton-enable-pre call s:skkeleton_pre()
  autocmd User skkeleton-disable-pre call s:skkeleton_post()
  function! s:skkeleton_pre() abort
    if dein#is_sourced('ddc.vim')
      let s:prev_buffer_config = ddc#custom#get_buffer()
      call ddc#custom#patch_buffer('sources', ['skkeleton'])
    end
  endfunction
  function! s:skkeleton_post() abort
    if dein#is_sourced('ddc.vim')
      call ddc#custom#set_buffer(s:prev_buffer_config)
    end
  endfunction
'''


[[plugins]]
# repo = 'TamDik/olppet.vim'
repo = '~/repos/github.com/TamDik/olppet.vim'
depends = ['denops.vim']
on_event = 'VimEnter'
hook_source = '''
  call olppet#register_snippet(g:VIM_ROOT . '/snippets', 'SnipMate')
  call olppet#enable()

  function s:smart_tab() abort
    if olppet#expand()
      return
    endif
    if olppet#jump_forward()
      return
    endif
    call feedkeys("\<Tab>", 'n')
  endfunction

  inoremap <Tab> <Cmd>call <SID>smart_tab()<CR>
  imap <S-Tab> <Plug>(olppet-jump-backward)
  snoremap <Tab> <Esc>i<Cmd>call <SID>smart_tab()<CR>
  snoremap <S-Tab> <Esc>i<Cmd>call olppet#jump_backward()<CR>
'''
