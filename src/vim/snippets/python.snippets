snippet imp
	import ${0:module}
snippet from
	from ${1:package} import ${0:module}
snippet wh
	while ${1:condition}:
		${0:${VISUAL}}
snippet with
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}
snippet cl
	class ${1:ClassName}(${2:object}):
		def __init__(self, ${3:arg}):
			${4:super($1, self).__init__()}
			self.$3 = $3
			${0}
snippet cla
	class ${1:class_name}:
		${0}
snippet clai
	class ${1:class_name}:
		def __init__(self, ${2:args}):
			${0}
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
snippet defi
	def __init__(self, ${1:args}):
		${0}
snippet defm
	def ${1:mname}(self, ${2:arg}):
		${0}
snippet if
	if ${1:condition}:
		${0:${VISUAL}}
snippet el
	else:
		${0:${VISUAL}}
snippet ei
	elif ${1:condition}:
		${0:${VISUAL}}
snippet for
	for ${1:item} in ${2:items}:
		${0}
snippet ret
	return ${0}
snippet .
	self.
snippet try Try/Except
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${0:raise $3}
snippet ifmain
	if __name__ == '__main__':
		${0:main()}
snippet _
	__${1:init}__
snippet pprint
	__import__('pprint').pprint(${1})
